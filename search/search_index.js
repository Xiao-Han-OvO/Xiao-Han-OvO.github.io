var __index = {"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"index.html","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u6587\u6863\u7ad9","text":"<p>\u8fd9\u91cc\u6709C++\u5185\u5bb9\uff0cJava\u5185\u5bb9\u7b49\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u5b66\u5230\u5f88\u591a\u3002</p>"},{"location":"OI/LSYOI/index.html","title":"\u7b80\u4ecb","text":"<p>LSYOI\u4e5f\u53eb\u674e\u5584\u52c7OI\uff0c\u662f\u4e00\u4e2a\u7531\u674e\u5584\u52c7\u8001\u5e08\u642d\u5efa\u7684\u7ebf\u4e0aOnlineJudge\u5e73\u53f0\u3002</p> <p>\u8fd9\u91cc\u4e3b\u8981\u8bb2\u89e3LSYOI\u91cc\u9762\u7684\u8f83\u96be\u9898\u76ee\u3002</p>"},{"location":"OI/LSYOI/Help/index.html","title":"\u7f16\u8bd1\u5668\u7248\u672c\u4e0e\u53c2\u6570","text":"<p>LSYOI \u4f7f\u7528 HydroJudge \u8fdb\u884c\u8bc4\u6d4b\uff0c\u7f16\u8bd1\u53c2\u6570\u5982\u4e0b\uff1a</p> <pre><code>- Bash(bash)\n    /bin/bash foo.sh\n- C(c)\n    /usr/bin/gcc -Wall --std=c99 -o foo foo.c -lm\n- C++(cc)\n    /usr/bin/g++ -Wall -std=c++14 -o foo foo.cc -lm -I/include\n- C++98(cc.cc98)\n    /usr/bin/g++ -Wall -std=c++98 -o foo foo.cc -lm -I/include\n- C++98(O2)(cc.cc98o2)\n    /usr/bin/g++ -Wall -std=c++98 -o foo foo.cc -lm -O2 -I/include\n- C++11(cc.cc11)\n    /usr/bin/g++  -std=c++11 -o foo foo.cc -lm -I/include\n- C++11(O2)(cc.cc11o2)\n    /usr/bin/g++  -std=c++11 -o foo foo.cc -lm -O2 -I/include\n- C++14(cc.cc14)\n    /usr/bin/g++ -Wall -std=c++14 -o foo foo.cc -lm -I/include\n- C++14(O2)(cc.cc14o2)\n    /usr/bin/g++  -std=c++14 -o foo foo.cc -lm -O2 -I/include\n- C++17(cc.cc17)\n    /usr/bin/g++  -std=c++17 -o foo foo.cc -lm -I/include\n- C++17(O2)(cc.cc17o2)\n    /usr/bin/g++  -std=c++17 -o foo foo.cc -lm -O2 -I/include\n- Pascal(pas)\n    /usr/bin/fpc -O2 -o/w/foo foo.pas\n- Java(java)\n    /usr/bin/bash -c \"javac -d /w -encoding utf8 ./Main.java &amp;&amp; jar cvf Main.jar *.class &gt;/dev/null\"\n- Kotlin(kt)\n    echo \"Invalid language selection\"\n- Kotlin/JVM(kt.jvm)\n    kotlinc -include-runtime -d foo.jar foo.kt\n- Python(py)\n    /usr/bin/python -c \"import py_compile; py_compile.compile('/w/foo.py', '/w/foo', doraise=True)\"\n- Python 2(py.py2)\n    /usr/bin/python -c \"import py_compile; py_compile.compile('/w/foo.py', '/w/foo', doraise=True)\"\n- Python 3(py.py3)\n    /usr/bin/python3 -c \"import py_compile; py_compile.compile('/w/foo.py', '/w/foo', doraise=True)\"\n- PyPy3(py.pypy3)\n    /bin/bash -c \"/usr/bin/pypy3 -c \\\"import py_compile; py_compile.compile('/w/foo.py', '/w/foo', doraise=True)\\\" &amp;&amp; mv foo.py foo\"\n- PHP(php)\n    /usr/bin/php foo.php\n- Rust(rs)\n    /usr/bin/rustc -O -o /w/foo /w/foo.rs\n- Haskell(hs)\n    /usr/bin/ghc -O -outputdir /tmp -o foo foo.hs\n- NodeJS(js)\n    /usr/bin/node /w/foo.js\n- Golang(go)\n    /usr/bin/go build -o foo foo.go\n- Ruby(rb)\n    /usr/bin/ruby foo.rb\n- C#(cs)\n    /usr/bin/mcs -optimize+ -out:/w/foo /w/foo.cs\n</code></pre>"},{"location":"OI/LSYOI/%E5%9F%9F/index.html","title":"\u7b80\u4ecb","text":"<p>\u6bcf\u4e2a\u7528\u6237\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u57df\u3002\u6bd4\u5982\uff0c\u8001\u5e08\u53ef\u4ee5\u4e3a\u8bfe\u7a0b\u521b\u5efa\u4e00\u4e2a\u57df\uff0c\u7136\u540e\u628a\u9898\u76ee\u548c\u5b66\u751f\u52a0\u5165\u5230\u6b64\u57df\u4e2d\u3002\u518d\u5982\uff0c\u53ef\u4ee5\u628a\u57df\u4f5c\u4e3a\u56e2\u961f\u529f\u80fd\u3002</p> <p>\u901a\u8fc7\u5408\u7406\u7684\u8bbe\u7f6e\u89d2\u8272\u53ca\u5176\u6743\u9650\uff0c\u53ef\u4ee5\u628a\u57df\u8bbe\u4e3a\u516c\u5f00\u6216\u79c1\u6709\u3002</p> <p>\u9ed8\u8ba4\u57df\u4e3a <code>\u65b0\u624b\u6751</code>\uff0c\u7528\u6237\u76f4\u63a5\u8bbf\u95ee LSYOI \u57df\u540d\u5c31\u4f1a\u8bbf\u95ee\u6b64\u57df\uff0c\u70b9\u51fb LSYOI Logo \u4f1a\u4ece\u4efb\u610f\u57df\u8df3\u8f6c\u56de <code>\u65b0\u624b\u6751</code> \u57df\u3002</p> <p>\u6bcf\u4e2a\u57df\u7684\u9898\u5e93\u3001\u8ba8\u8bba\u3001\u8bad\u7ec3\u4ee5\u53ca\u6bd4\u8d5b\u662f\u72ec\u7acb\u4e14\u81ea\u6cbb\u7684\u3002</p>"},{"location":"OI/LSYOI/%E5%9F%9F/%E6%96%B0%E6%89%8B%E6%9D%91/index.html","title":"\u7b80\u4ecb","text":"<p>\u8fd9\u91cc\u662fLSYOI\u4e2d\u7684\u4e00\u4e2a\u57df\uff1a\u65b0\u624b\u6751\u3002</p>"},{"location":"OI/OJ/index.html","title":"\u8457\u540dOJ","text":""},{"location":"OI/OJ/index.html#leetcode","title":"\u529b\u6263 | leetcode","text":"<p>\u56fd\u5185\u7ad9\u70b9 \u7f8e\u56fd\u7ad9\u70b9</p>"},{"location":"OI/OJ/index.html#luogu","title":"\u6d1b\u8c37 | Luogu","text":"<p>\u94fe\u63a5</p>"},{"location":"OI/OJ/index.html#codeforces","title":"Codeforces","text":"<p>Codeforces\uff0c\u7b80\u79f0CF\uff0c\u662f\u4fc4\u7f57\u65af\u7684\u4e00\u4e2aOnline Judgment\u5e73\u53f0\u3002</p> <p>\u94fe\u63a5</p>"},{"location":"OI/OJ/index.html#c","title":"C\u8bed\u8a00\u7f51","text":"<p>\u94fe\u63a5</p>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/index.html","title":"\u9898\u89e3\uff1aP12280 [\u84dd\u6865\u676f 2024 \u56fd Python A] \u7279\u522b\u7684\u6570\u7ec4","text":""},{"location":"OI/%E9%A2%98%E8%A7%A3/P12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/index.html#_1","title":"\u601d\u8def\u4e0e\u7b97\u6cd5","text":""},{"location":"OI/%E9%A2%98%E8%A7%A3/P12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/index.html#_2","title":"\u4e3b\u601d\u8def\u4e0e\u7b97\u6cd5","text":"<p>\u9996\u5148\uff0c\u9898\u76ee\u8981\u6c42\u7684\u662f\u79fb\u9664\u4e00\u4e2a\u533a\u95f4\u540e\u5269\u4e0b\u7684\u5143\u7d20\u5fc5\u987b\u5168\u90e8\u552f\u4e00\u3002\u90a3\u4e48\u6700\u5927\u7684\u5269\u4f59\u957f\u5ea6\u5c31\u662f\u539f\u957f\u5ea6\u51cf\u53bb\u88ab\u79fb\u9664\u533a\u95f4\u7684\u957f\u5ea6\u3002\u6240\u4ee5\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u627e\u5230\u6700\u5c0f\u7684\u9700\u8981\u79fb\u9664\u7684\u533a\u95f4\u957f\u5ea6\uff0c\u8fd9\u6837\u5269\u4e0b\u7684\u90e8\u5206\u5c31\u6700\u957f\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u76ee\u6807\u5e94\u8be5\u662f\u627e\u5230\u8fd9\u6837\u7684\u4e00\u4e2a\u6700\u5c0f\u7684\u533a\u95f4\uff0c\u5f53\u79fb\u9664\u5b83\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u90fd\u662f\u552f\u4e00\u7684\u3002</p> <p>\u90a3\u600e\u4e48\u627e\u5230\u8fd9\u4e2a\u6700\u5c0f\u7684\u533a\u95f4\u5462\uff1f\u76f4\u63a5\u60f3\u5230\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u80fd\u786e\u5b9a\u54ea\u4e9b\u5143\u7d20\u662f\u91cd\u590d\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u79fb\u9664\u7684\u533a\u95f4\u5fc5\u987b\u8986\u76d6\u6240\u6709\u91cd\u590d\u5143\u7d20\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u5143\u7d20\u4e0d\u518d\u91cd\u590d\u3002\u4f46\u8fd9\u4f3c\u4e4e\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u4e3a\u53ef\u80fd\u6709\u591a\u4e2a\u91cd\u590d\u5143\u7d20\u5206\u5e03\u5728\u6570\u7ec4\u7684\u4e0d\u540c\u4f4d\u7f6e\u3002</p> <p>\u6240\u4ee5\uff0c\u6211\u4eec\u601d\u8003\uff0c\u5982\u4f55\u9ad8\u6548\u5730\u627e\u5230\u8fd9\u4e2a\u6700\u5c0f\u7684\u79fb\u9664\u533a\u95f4\u5462\uff1f\u76f4\u63a5\u66b4\u529b\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684L\u548cR\u663e\u7136\u4e0d\u53ef\u884c\uff0c\u56e0\u4e3a\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u662f O(n^2)\uff0c\u5bf9\u4e8e n = 1 \\times 10^5 \u7684\u60c5\u51b5\uff0c\u8fd9\u5b8c\u5168\u65e0\u6cd5\u5904\u7406\u3002</p> <p>\u8fd9\u65f6\u5019\uff0c\u60f3\u5230\u6ed1\u52a8\u7a97\u53e3\uff08\u53cc\u6307\u9488\uff09\u7684\u65b9\u6cd5\u3002\u6ed1\u52a8\u7a97\u53e3\u901a\u5e38\u7528\u6765\u5904\u7406\u5b50\u6570\u7ec4\u6216\u5b50\u533a\u95f4\u7684\u95ee\u9898\uff0c\u5c24\u5176\u662f\u6d89\u53ca\u8fde\u7eed\u5143\u7d20\u7684\u60c5\u51b5\u3002\u90a3\u4e48\uff0c\u8fd9\u91cc\u7684\u95ee\u9898\u662f\u5426\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6ed1\u52a8\u7a97\u53e3\u7684\u95ee\u9898\uff1f</p> <p>\u6ed1\u52a8\u7a97\u53e3\u7684\u6838\u5fc3\u601d\u60f3\u662f\u7ef4\u62a4\u4e00\u4e2a\u7a97\u53e3\uff0c\u4f7f\u5f97\u7a97\u53e3\u5185\u7684\u5143\u7d20\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\uff0c\u800c\u7a97\u53e3\u5916\u7684\u5143\u7d20\u6ee1\u8db3\u53e6\u4e00\u79cd\u6761\u4ef6\u3002\u4f8b\u5982\uff0c\u5728\u8fd9\u4e2a\u95ee\u9898\u4e2d\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u627e\u5230\u4e00\u4e2a\u7a97\u53e3 [L, R]\uff0c\u5f53\u79fb\u9664\u8fd9\u4e2a\u7a97\u53e3\u540e\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u90fd\u662f\u552f\u4e00\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u7a97\u53e3\u5916\u7684\u5143\u7d20\u5fc5\u987b\u5168\u90e8\u552f\u4e00\u3002</p> <p>\u6362\u53e5\u8bdd\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u7a97\u53e3\uff0c\u4f7f\u5f97\u5728\u6570\u7ec4\u7684\u5de6\u53f3\u4e24\u90e8\u5206\uff08\u7a97\u53e3\u5de6\u8fb9\u548c\u7a97\u53e3\u53f3\u8fb9\uff09\u4e2d\u7684\u5143\u7d20\u90fd\u6ca1\u6709\u91cd\u590d\u3002\u6216\u8005\u66f4\u51c6\u786e\u5730\u8bf4\uff0c\u6574\u4e2a\u6570\u7ec4\u9664\u4e86\u7a97\u53e3\u5185\u7684\u5143\u7d20\u4e4b\u5916\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u90fd\u662f\u552f\u4e00\u7684\u3002</p> <p>\u8fd9\u65f6\u5019\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u5bfb\u627e\u4e00\u4e2a\u7a97\u53e3\uff0c\u4f7f\u5f97\u7a97\u53e3\u5916\u7684\u5143\u7d20\u90fd\u4e0d\u91cd\u590d\u3002\u627e\u5230\u8fd9\u6837\u7684\u7a97\u53e3\u540e\uff0c\u6211\u4eec\u8981\u627e\u51fa\u5176\u4e2d\u957f\u5ea6\u6700\u5c0f\u7684\u90a3\u4e2a\u7a97\u53e3\uff0c\u8fd9\u6837\u539f\u6570\u7ec4\u957f\u5ea6\u51cf\u53bb\u8fd9\u4e2a\u7a97\u53e3\u957f\u5ea6\u5c31\u662f\u6700\u5927\u7684\u5269\u4f59\u957f\u5ea6\u3002</p> <p>\u4e8e\u662f\uff0c\u6ed1\u52a8\u7a97\u53e3\u7684\u601d\u8def\u662f\u53ef\u884c\u7684\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4ece\u6570\u7ec4\u4e2d\u79fb\u9664\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4 [L, R]\uff0c\u4f7f\u5f97\u5269\u4f59\u5143\u7d20\u5168\u4e3a\u552f\u4e00\uff0c\u4e14\u5269\u4f59\u90e8\u5206\u5c3d\u53ef\u80fd\u957f\u3002\u76ee\u6807\u8f6c\u5316\u4e3a\u5bfb\u627e\u79fb\u9664\u7684\u6700\u5c0f\u533a\u95f4\u957f\u5ea6\uff0c\u4f7f\u5f97\u5269\u4f59\u5143\u7d20\u552f\u4e00\u3002</p> <p>\u8fd9\u4e2a\u601d\u8def\u7684\u5173\u952e\u70b9\u5728\u4e8e\uff0c\u5982\u4f55\u9ad8\u6548\u5730\u7ef4\u62a4\u7a97\u53e3\u5916\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5e76\u5feb\u901f\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\u3002\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u53ef\u4ee5\u5728 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u5143\u7d20\u6700\u591a\u88ab\u5de6\u53f3\u6307\u9488\u5404\u904d\u5386\u4e00\u6b21\uff08\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\uff09\u3002</p>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/index.html#_3","title":"\u526f\u7b97\u6cd5","text":"<ul> <li>\u54c8\u5e0c\u8868\u6a21\u62df\uff1a\u901a\u8fc7\u6570\u7ec4 cnt \u76f4\u63a5\u7d22\u5f15\u5143\u7d20\u503c\uff0c\u7edf\u8ba1\u9891\u7387\uff0c\u907f\u514d\u590d\u6742\u6570\u636e\u7ed3\u6784\u3002</li> </ul>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/index.html#_4","title":"\u4ee3\u7801","text":"<p>\u9996\u5148\u7edf\u8ba1\u6574\u4e2a\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\u3002\u5982\u679c\u539f\u6570\u7ec4\u5df2\u7ecf\u662f\u6240\u6709\u5143\u7d20\u552f\u4e00\u7684\uff08\u7279\u6b8a\u60c5\u51b5\uff09\uff0c\u90a3\u4e48\u4e0d\u9700\u8981\u79fb\u9664\u4efb\u4f55\u533a\u95f4\uff0c\u76f4\u63a5\u8fd4\u56de n\u3002\u5426\u5219\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u6700\u5c0f\u7684\u7a97\u53e3 [L, R]\uff0c\u4f7f\u5f97\u79fb\u9664\u8fd9\u4e2a\u7a97\u53e3\u540e\u5269\u4e0b\u7684\u5143\u7d20\u552f\u4e00\u3002</p> <p>\u63a5\u7740\uff0c\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\u7684\u65b9\u6cd5\uff0c\u7ef4\u62a4\u5de6\u53f3\u6307\u9488\uff0c\u4ee5\u53ca\u7a97\u53e3\u5916\u7684\u5143\u7d20\u7684\u9891\u7387\u8868\u3002\u6211\u4eec\u8fd9\u91cc\u547d\u540d\u4e00\u4e2a\u53d8\u91cf over-cnt\uff0c\u8868\u793a\u7a97\u53e3\u5916\u6709\u591a\u5c11\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7 1\u3002\u53f3\u6307\u9488\u4e0d\u65ad\u53f3\u79fb\uff0c\u5c06\u5f53\u524d\u5143\u7d20\u79fb\u51fa\u7a97\u53e3\u5916\uff08\u5373\u5176\u9891\u7387\u51cf 1\uff09\u3002\u5982\u679c\u8fd9\u4e2a\u64cd\u4f5c\u5bfc\u81f4\u8be5\u5143\u7d20\u7684\u9891\u7387\u4ece 2 \u53d8\u4e3a 1 \uff0c\u90a3\u4e48 over_cnt \u51cf 1\uff0c\u56e0\u4e3a\u8be5\u5143\u7d20\u5728\u7a97\u53e3\u5916\u4e0d\u518d\u91cd\u590d\u3002</p> <p>\u5f53 over-cnt \u53d8\u4e3a 0 \u65f6\uff0c\u8bf4\u660e\u7a97\u53e3\u5916\u7684\u5143\u7d20\u6ca1\u6709\u91cd\u590d\u3002\u6b64\u65f6\uff0c\u5c1d\u8bd5\u6536\u7f29\u5de6\u6307\u9488\uff0c\u79fb\u52a8\u5de6\u6307\u9488\uff0c\u5c06\u5143\u7d20\u91cd\u65b0\u52a0\u5165\u7a97\u53e3\u5916\uff08\u5373\u5176\u9891\u7387\u52a0 1\uff09\u3002\u5982\u679c\u67d0\u4e2a\u5143\u7d20\u7684\u9891\u7387\u4ece 1 \u53d8\u4e3a 2\uff0c\u5219 over-cnt \u52a0 1\uff0c\u6b64\u65f6\u505c\u6b62\u6536\u7f29\uff0c\u8bb0\u5f55\u5f53\u524d\u7a97\u53e3\u7684\u957f\u5ea6\u662f\u5426\u4e3a\u6700\u5c0f\u503c\u3002</p> <p>\u6700\u7ec8\uff0c\u627e\u5230\u6700\u5c0f\u7684\u7a97\u53e3\u957f\u5ea6\uff0c\u539f\u6570\u7ec4\u957f\u5ea6\u51cf\u53bb\u8fd9\u4e2a\u957f\u5ea6\u5c31\u662f\u7b54\u6848\u3002</p> <p>\u6211\u4eec\u9700\u8981\u4ece\u6570\u7ec4\u4e2d\u79fb\u9664\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4 [L, R]\uff0c\u4f7f\u5f97\u5269\u4f59\u5143\u7d20\u5168\u4e3a\u552f\u4e00\uff0c\u4e14\u5269\u4f59\u90e8\u5206\u5c3d\u53ef\u80fd\u957f\u3002\u76ee\u6807\u8f6c\u5316\u4e3a\u5bfb\u627e\u79fb\u9664\u7684\u6700\u5c0f\u533a\u95f4\u957f\u5ea6\uff0c\u4f7f\u5f97\u5269\u4f59\u5143\u7d20\u552f\u4e00\u3002</p> <p>\u6700\u540e\u732e\u4e0a\u6211\u7684\u51e0\u7bc7\u4ee3\u7801\uff1a</p>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/index.html#c","title":"C++","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int MAXN = 1e5 + 5;\nint a[MAXN];\nint cnt[MAXN * 2];\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    // \u7edf\u8ba1\u5168\u5c40\u9891\u7387\n    for (int i = 0; i &lt; n; ++i) {\n        cin &gt;&gt; a[i];\n        cnt[a[i]]++;\n    }\n    // \u8ba1\u7b97\u521d\u59cb\u91cd\u590d\u5143\u7d20\u79cd\u7c7b\u6570\n    int over_cnt = 0;\n    for (int i = 0; i &lt; MAXN * 2; ++i) {\n        if (cnt[i] &gt; 1) over_cnt++;\n    }\n    // \u82e5\u6570\u7ec4\u672c\u8eab\u65e0\u91cd\u590d\uff0c\u76f4\u63a5\u8fd4\u56de\n    if (over_cnt == 0) {\n        cout &lt;&lt; n;\n        return 0;\n    }\n    int min_win = n;\n    int left = 0;\n    for (int right = 0; right &lt; n; ++right) {\n        int x = a[right];\n        cnt[x]--; // \u79fb\u51fa\u7a97\u53e3\u5916\uff08\u4fdd\u7559\u8be5\u5143\u7d20\uff09\n        if (cnt[x] == 1)\n            over_cnt--;\n        // \u5f53\u7a97\u53e3\u5916\u65e0\u91cd\u590d\u65f6\uff0c\u5c1d\u8bd5\u6536\u7f29\u5de6\u8fb9\u754c\n        while (over_cnt == 0 &amp;&amp; left &lt;= right) {\n            min_win = min(min_win, right - left + 1);\n            int y = a[left];\n            cnt[y]++; // \u5c06\u5143\u7d20\u79fb\u56de\u7a97\u53e3\u5916\uff08\u79fb\u9664\u8be5\u5143\u7d20\uff09\n            if (cnt[y] == 2)\n                over_cnt++;\n            left++;\n        }\n    }\n    cout &lt;&lt; n - min_win;\n    return 0;\n}\n</code></pre>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/index.html#c_1","title":"C","text":"<pre><code>using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        const int MAXN = 100005 * 2;\n        int n = int.Parse(Console.ReadLine());\n        string[] input = Console.ReadLine().Split(' ');\n        int[] a = Array.ConvertAll(input, int.Parse);\n        int[] cnt = new int[MAXN];\n        // \u7edf\u8ba1\u6240\u6709\u5143\u7d20\u9891\u7387\n        foreach (int x in a)\n        {\n            cnt[x]++;\n        }\n        // \u8ba1\u7b97\u521d\u59cb\u91cd\u590d\u5143\u7d20\u79cd\u7c7b\u6570\n        int over_cnt = 0;\n        for (int i = 0; i &lt; MAXN; i++)\n        {\n            if (cnt[i] &gt; 1) over_cnt++;\n        }\n        // \u82e5\u6570\u7ec4\u672c\u8eab\u65e0\u91cd\u590d\uff0c\u76f4\u63a5\u8fd4\u56de\n        if (over_cnt == 0)\n        {\n            Console.WriteLine(n);\n            return;\n        }\n        int min_win = n;\n        int left = 0;\n        for (int right = 0; right &lt; n; right++)\n        {\n            int x = a[right];\n            cnt[x]--; // \u79fb\u51fa\u7a97\u53e3\u5916\uff08\u4fdd\u7559\u8be5\u5143\u7d20\uff09\n            if (cnt[x] == 1) over_cnt--;\n            // \u5f53\u7a97\u53e3\u5916\u65e0\u91cd\u590d\u65f6\uff0c\u5c1d\u8bd5\u6536\u7f29\u5de6\u8fb9\u754c\n            while (over_cnt == 0 &amp;&amp; left &lt;= right)\n            {\n                min_win = Math.Min(min_win, right - left + 1);\n                int y = a[left];\n                cnt[y]++; // \u5c06\u5143\u7d20\u79fb\u56de\u7a97\u53e3\u5916\uff08\u79fb\u9664\u8be5\u5143\u7d20\uff09\n                if (cnt[y] == 2) over_cnt++;\n                left++;\n            }\n        }\n        Console.WriteLine(n - min_win);\n    }\n}\n</code></pre>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/index.html#java","title":"Java","text":"<pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        final int MAXN = 100005 * 2;\n        Scanner scanner = new Scanner(System.in);\n        int n = Integer.parseInt(scanner.nextLine());\n        String[] input = scanner.nextLine().split(\" \");\n        int[] a = Arrays.stream(input).mapToInt(Integer::parseInt).toArray();\n        int[] cnt = new int[MAXN];\n        // \u7edf\u8ba1\u6240\u6709\u5143\u7d20\u9891\u7387\n        for (int x : a) {\n            cnt[x]++;\n        }\n        // \u8ba1\u7b97\u521d\u59cb\u91cd\u590d\u5143\u7d20\u79cd\u7c7b\u6570\n        int overCnt = 0;\n        for (int i = 0; i &lt; MAXN; i++) {\n            if (cnt[i] &gt; 1) overCnt++;\n        }\n        // \u82e5\u6570\u7ec4\u672c\u8eab\u65e0\u91cd\u590d\uff0c\u76f4\u63a5\u8fd4\u56de\n        if (overCnt == 0) {\n            System.out.println(n);\n            return;\n        }\n        int minWin = n;\n        int left = 0;\n        for (int right = 0; right &lt; n; right++) {\n            int x = a[right];\n            cnt[x]--; // \u79fb\u51fa\u7a97\u53e3\u5916\uff08\u4fdd\u7559\u8be5\u5143\u7d20\uff09\n            if (cnt[x] == 1) overCnt--;\n            // \u5f53\u7a97\u53e3\u5916\u65e0\u91cd\u590d\u65f6\uff0c\u5c1d\u8bd5\u6536\u7f29\u5de6\u8fb9\u754c\n            while (overCnt == 0 &amp;&amp; left &lt;= right) {\n                minWin = Math.min(minWin, right - left + 1);\n                int y = a[left];\n                cnt[y]++; // \u5c06\u5143\u7d20\u79fb\u56de\u7a97\u53e3\u5916\uff08\u79fb\u9664\u8be5\u5143\u7d20\uff09\n                if (cnt[y] == 2) overCnt++;\n                left++;\n            }\n        }\n        System.out.println(n - minWin);\n    }\n}\n</code></pre>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12280%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Python%20A%5D%20%E7%89%B9%E5%88%AB%E7%9A%84%E6%95%B0%E7%BB%84/index.html#python","title":"Python","text":"<pre><code>n = int(input())\na = list(map(int, input().split()))\nfrom collections import defaultdict\ncnt = defaultdict(int)\nfor x in a:\n    cnt[x] += 1\nover_cnt = sum(1 for x in cnt if cnt[x] &gt; 1)\nif over_cnt == 0:\n    print(n)\n    exit()\nmin_win = n\nleft = 0\nfor right in range(n):\n    x = a[right]\n    cnt[x] -= 1\n    if cnt[x] == 1:\n        over_cnt -= 1\n    while over_cnt == 0 and left &lt;= right:\n        current_win = right - left + 1\n        if current_win &lt; min_win:\n            min_win = current_win\n        y = a[left]\n        cnt[y] += 1\n        if cnt[y] == 2:\n            over_cnt += 1\n        left += 1\nprint(n - min_win)\n</code></pre>"},{"location":"OI/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7%20P12289%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Java%20A%5D%20%E4%BF%AE%E6%94%B9%E6%95%B0%E4%BD%8D/index.html","title":"\u9898\u89e3\uff1a\u6d1b\u8c37 P12289 [\u84dd\u6865\u676f 2024 \u56fd Java A] \u4fee\u6539\u6570\u4f4d","text":""},{"location":"OI/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7%20P12289%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Java%20A%5D%20%E4%BF%AE%E6%94%B9%E6%95%B0%E4%BD%8D/index.html#_1","title":"\u601d\u8def\u4e0e\u7b97\u6cd5","text":""},{"location":"OI/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7%20P12289%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Java%20A%5D%20%E4%BF%AE%E6%94%B9%E6%95%B0%E4%BD%8D/index.html#_2","title":"\u9898\u76ee\u5927\u610f","text":"<p>\u9898\u76ee\u8981\u6c42\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a 10 \u7684\u5b50\u4e32\uff0c\u4f7f\u5f97\u8be5\u5b50\u4e32\u5305\u542b\u4ece 0 \u5230 9 \u7684\u6240\u6709\u6570\u5b57\uff0c\u4e14\u6bcf\u4e2a\u6570\u5b57\u6070\u597d\u51fa\u73b0\u4e00\u6b21\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u539f\u6570\u7684\u67d0\u4e9b\u6570\u5b57\uff0c\u4f46\u9700\u8981\u6700\u5c0f\u5316\u4fee\u6539\u7684\u4ee3\u4ef7\uff08\u5373\u4fee\u6539\u7684\u6570\u5b57\u5dee\u503c\u4e4b\u548c\uff09\u3002\u540c\u65f6\uff0c\u4fee\u6539\u540e\u7684\u6570\u4ecd\u9700\u6ee1\u8db3\u6ca1\u6709\u524d\u5bfc\u96f6\u7684\u9650\u5236\u3002</p>"},{"location":"OI/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7%20P12289%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Java%20A%5D%20%E4%BF%AE%E6%94%B9%E6%95%B0%E4%BD%8D/index.html#_3","title":"\u601d\u8def","text":"<p>\u4e0d\u662f\u6211\u8bf4\uff0c\u6211\u7684\u7b97\u6cd5\u5012\u8fd8\u633a\u66b4\u529b\u7684\u3002</p> <p>\u6211\u7684\u505a\u6cd5\u662f\u73b0\u9009\u51fa\u4e00\u4e2a\u5b57\u4e32\uff0c\u7136\u540e\u518d\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u6876\u6392\u5e8f\u7684\u65b9\u6cd5\u7edf\u8ba1\u6570\u5b57\u4e2a\u6570\u3002\u7531\u4e8e\u8fd9\u91cc\u5b57\u4e32\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c\u4e14\u662f\u7531\u5de6\u4fa7\u5411\u53f3\u4fa7\u626b\u63cf\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u662f\u6ed1\u52a8\u7a97\u53e3\u7684\u5199\u6cd5\u3002</p> <p>\u6bcf\u6b21\u6876\u6392\u5e8f\u7edf\u8ba1\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u80fd\u591f\u5f97\u5230\u54ea\u4e9b\u6570\u5b57\u88ab\u591a\u7b97\u4e86\uff0c\u54ea\u4e9b\u6570\u5b57\u88ab\u5c11\u7b97\u4e86\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u4e0d\u65ad\u4fdd\u8bc1\u88ab\u66ff\u6362\u7684\u7684\u6570\u5b57\u4e0e\u66ff\u6362\u540e\u7684\u6570\u5b57\u4e4b\u5dee\u6700\u5c0f\u5373\u53ef\u3002</p> <p>\u8fd9\u4e2a\u65f6\u5019\u8981\u6ce8\u610f\u4e24\u4e2a\u7279\u6b8a\u60c5\u51b5\uff1a 1. \u539f\u4e32\u957f\u5ea6\u5c0f\u4e8e 10\uff0c\u4e5f\u5c31\u662f\u8bf4\u6839\u672c\u4e0d\u53ef\u80fd\u51fa\u73b0 10 \u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u3002 2. \u5f53\u626b\u63cf\u7b2c\u4e00\u4e2a\u957f\u5ea6\u4e3a 10 \u7684\u5b57\u4e32\u65f6\uff0c\u8981\u6ce8\u610f\u7b2c\u4e00\u4e2a\u6570\u4e0d\u80fd\u88ab\u4fee\u6539\u4e3a 0\uff08\u5373\u4e0d\u80fd\u6709\u524d\u5bfc\u96f6\uff09\u3002</p>"},{"location":"OI/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7%20P12289%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Java%20A%5D%20%E4%BF%AE%E6%94%B9%E6%95%B0%E4%BD%8D/index.html#_4","title":"\u7b97\u6cd5","text":"<p>\u7531\u7b97\u6cd5\u6807\u7b7e\u53ef\u77e5</p> <p>\u7531\u601d\u8def\uff0c\u6211\u4eec\u80fd\u77e5\u9053\u6211\u4eec\u8981\u5199\u4ee5\u4e0b\u51e0\u4e2a\u7b97\u6cd5\uff1a</p> <p>1.\u6ed1\u52a8\u7a97\u53e3\uff1a</p> <p>\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\uff0c\u904d\u5386\u957f\u5ea6\u4e3a 10 \u7684\u6240\u6709\u5b50\u4e32\u3002\u5177\u4f53\u5730\uff0c\u5bf9\u6bcf\u4e2a\u5b50\u4e32\uff0c\u8ba1\u7b97\u5176\u662f\u5426\u5df2\u7ecf\u662f\u4e00\u4e2a\u6392\u5217\u3002\u5982\u679c\u662f\uff0c\u5219\u4ee3\u4ef7\u4e3a 0\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8ba1\u7b97\u5c06\u5176\u53d8\u4e3a\u4e00\u4e2a\u6392\u5217\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002</p> <p>tip\uff1a\u8fd9\u91cc\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u7684\u53cc\u6307\u9488\uff0c\u5b9e\u9645\u4e0a\u662f\u5355\u6307\u9488\u3002</p> <p>2.\u6876\u6392\u5e8f\uff1a</p> <p>\u7edf\u8ba1\u6bcf\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\u3002</p> <p>\u8fd9\u91cc\u6211\u4eec\u8fd8\u505a\u4e86\u4e00\u4e9b\u5176\u4ed6\u7684\u4f18\u5316\uff08\u7c7b\u4f3c\u4e8e KMP\uff1f\uff09\uff1a</p> <p>1.\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff1a</p> <p>\u6ed1\u52a8\u7a97\u53e3\u53ef\u4ee5\u901a\u8fc7\u589e\u91cf\u66f4\u65b0\u9891\u7387\u6570\u7ec4\uff08\u5c31\u662f\u5f53\u5b83\u5f80\u540e\u79fb\u52a8\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u52a0\u51cf\u65b0\u8fdb\u5165\u7a97\u53e3\u4e2d\u7684\u6570\u5b57\u4e0e\u79bb\u5f00\u7a97\u53e3\u4e2d\u7684\u6570\u5b57\uff09\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002</p> <p>2.\u6392\u5e8f\uff1a</p> <p>\u5bf9\u4e8e\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u6392\u5e8f\u540e\u5339\u914d\uff0c\u786e\u4fdd\u4ee3\u4ef7\u6700\u5c0f\u3002</p>"},{"location":"OI/%E9%A2%98%E8%A7%A3/%E6%B4%9B%E8%B0%B7%20P12289%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202024%20%E5%9B%BD%20Java%20A%5D%20%E4%BF%AE%E6%94%B9%E6%95%B0%E4%BD%8D/index.html#_5","title":"\u4ee3\u7801","text":"<p>\u8fd9\u91cc\u732e\u4e0a\u81ea\u5df1\u7684\u4ee3\u7801\uff08Python \u8d85\u65f6\u4e86\uff0c\u5c31\u4e0d\u653e\u51fa\u6765\u4e86\uff09\uff1a</p> C++ ver. <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    string m_str;\n    cin &gt;&gt; m_str;\n    int n = m_str.size();\n    // \u5982\u679c\u957f\u5ea6\u5c0f\u4e8e 10\uff0c\u76f4\u63a5\u8f93\u51fa -1\n    if (n &lt; 10) {\n        cout &lt;&lt; -1 &lt;&lt; endl;\n        return 0;\n    }\n    int min_cost = INT_MAX;\n    // \u6ed1\u52a8\u7a97\u53e3\u904d\u5386\u6240\u6709\u957f\u5ea6\u4e3a 10 \u7684\u5b50\u4e32\n    for (int i = 0; i &lt;= n - 10; i++) {\n        string window = m_str.substr(i, 10);\n        int freq[10] = {0};\n        // \u7edf\u8ba1\u5b50\u4e32\u4e2d\u6bcf\u4e2a\u6570\u5b57\u7684\u9891\u7387\n        for (char d : window) {\n            freq[d - '0']++;\n        }\n        // \u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u662f\u4e00\u4e2a\u6392\u5217\n        bool is_permutation = true;\n        for (int d = 0; d &lt;= 9; d++) {\n            if (freq[d] != 1) {\n                is_permutation = false;\n                break;\n            }\n        }\n        // \u5982\u679c\u662f\u6392\u5217\uff0c\u4ee3\u4ef7\u4e3a 0\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\n        if (is_permutation) {\n            cout &lt;&lt; 0 &lt;&lt; endl;\n            return 0;\n        }\n        // \u8bb0\u5f55\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n        char dup[10], miss[10];\n        int dup_cnt = 0, miss_cnt = 0;\n\n        for (int d = 0; d &lt;= 9; d++) {\n            int cnt = freq[d];\n            if (cnt &gt; 1) {\n                for (int j = 1; j &lt; cnt; j++) {\n                    dup[dup_cnt++] = d + '0';\n                }\n            } else if (cnt == 0) {\n                miss[miss_cnt++] = d + '0';\n            }\n        }\n        // \u8ba1\u7b97\u4ee3\u4ef7\n        bool mnz = (window[0] == '0');\n        // \u662f\u5426\u6709\u524d\u5bfc\u96f6\n        int cost = 0;\n        if (mnz) {\n            // \u7279\u6b8a\u5904\u7406\u524d\u5bfc\u96f6\n            bool found = false;\n            for (int j = 0; j &lt; dup_cnt; j++) {\n                if (dup[j] == window[0]) {\n                    char best_d = '0';\n                    int min_diff = INT_MAX;\n                    for (int k = 0; k &lt; miss_cnt; k++) {\n                        if (miss[k] != '0') {\n                            int diff = abs(miss[k] - window[0]);\n                            if (diff &lt; min_diff) {\n                                min_diff = diff;\n                                best_d = miss[k];\n                            }\n                        }\n                    }\n                    if (best_d == '0') {\n                        cost = INT_MAX;\n                        break;\n                    }\n                    cost += min_diff;\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) continue;\n        }\n        // \u5339\u914d\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n        sort(dup, dup + dup_cnt);\n        sort(miss, miss + miss_cnt);\n        for (int j = 0; j &lt; dup_cnt; j++) {\n            cost += abs(miss[j] - dup[j]);\n        }\n        // \u66f4\u65b0\u6700\u5c0f\u4ee3\u4ef7\n        min_cost = min(min_cost, cost);\n    }\n    // \u8f93\u51fa\u7ed3\u679c\n    cout &lt;&lt; min_cost &lt;&lt; endl;\n    return 0;\n}\n</code></pre> C# ver. <pre><code>using System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        string m_str = Console.ReadLine();\n        int n = m_str.Length;\n        // \u5982\u679c\u957f\u5ea6\u5c0f\u4e8e 10\uff0c\u76f4\u63a5\u8f93\u51fa -1\n        if (n &lt; 10)\n        {\n            Console.WriteLine(-1);\n            return;\n        }\n        int min_cost = int.MaxValue;\n        // \u6ed1\u52a8\u7a97\u53e3\u904d\u5386\u6240\u6709\u957f\u5ea6\u4e3a 10 \u7684\u5b50\u4e32\n        for (int i = 0; i &lt;= n - 10; i++)\n        {\n            string window = m_str.Substring(i, 10);\n            int[] freq = new int[10];\n            // \u7edf\u8ba1\u5b50\u4e32\u4e2d\u6bcf\u4e2a\u6570\u5b57\u7684\u9891\u7387\n            foreach (char d in window)\n            {\n                freq[d - '0']++;\n            }\n            // \u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u662f\u4e00\u4e2a\u6392\u5217\n            bool is_permutation = true;\n            for (int d = 0; d &lt;= 9; d++)\n            {\n                if (freq[d] != 1)\n                {\n                    is_permutation = false;\n                    break;\n                }\n            }\n            // \u5982\u679c\u662f\u6392\u5217\uff0c\u4ee3\u4ef7\u4e3a 0\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\n            if (is_permutation)\n            {\n                Console.WriteLine(0);\n                return;\n            }\n            // \u8bb0\u5f55\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n            char[] dup = new char[10];\n            char[] miss = new char[10];\n            int dup_cnt = 0, miss_cnt = 0;\n            for (int d = 0; d &lt;= 9; d++)\n            {\n                int cnt = freq[d];\n                if (cnt &gt; 1)\n                {\n                    for (int j = 1; j &lt; cnt; j++)\n                    {\n                        dup[dup_cnt++] = (char)(d + '0');\n                    }\n                }\n                else if (cnt == 0)\n                {\n                    miss[miss_cnt++] = (char)(d + '0');\n                }\n            }\n            // \u8ba1\u7b97\u4ee3\u4ef7\n            bool mnz = (window[0] == '0'); // \u662f\u5426\u6709\u524d\u5bfc\u96f6\n            int cost = 0;\n            if (mnz)\n            {\n                // \u7279\u6b8a\u5904\u7406\u524d\u5bfc\u96f6\n                bool found = false;\n                for (int j = 0; j &lt; dup_cnt; j++)\n                {\n                    if (dup[j] == window[0])\n                    {\n                        char best_d = '0';\n                        int min_diff = int.MaxValue;\n                        for (int k = 0; k &lt; miss_cnt; k++)\n                        {\n                            if (miss[k] != '0')\n                            {\n                                int diff = Math.Abs(miss[k] - window[0]);\n                                if (diff &lt; min_diff)\n                                {\n                                    min_diff = diff;\n                                    best_d = miss[k];\n                                }\n                            }\n                        }\n                        if (best_d == '0')\n                        {\n                            cost = int.MaxValue;\n                            break;\n                        }\n                        cost += min_diff;\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) continue;\n            }\n            // \u5339\u914d\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n            Array.Sort(dup, 0, dup_cnt);\n            Array.Sort(miss, 0, miss_cnt);\n            for (int j = 0; j &lt; dup_cnt; j++)\n            {\n                cost += Math.Abs(miss[j] - dup[j]);\n            }\n            // \u66f4\u65b0\u6700\u5c0f\u4ee3\u4ef7\n            min_cost = Math.Min(min_cost, cost);\n        }\n        // \u8f93\u51fa\u7ed3\u679c\n        Console.WriteLine(min_cost);\n    }\n}\n</code></pre> Java ver. <pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String m_str = scanner.nextLine();\n        int n = m_str.length();\n        // \u5982\u679c\u957f\u5ea6\u5c0f\u4e8e 10\uff0c\u76f4\u63a5\u8f93\u51fa -1\n        if (n &lt; 10) {\n            System.out.println(-1);\n            return;\n        }\n        int min_cost = Integer.MAX_VALUE;\n        // \u6ed1\u52a8\u7a97\u53e3\u904d\u5386\u6240\u6709\u957f\u5ea6\u4e3a 10 \u7684\u5b50\u4e32\n        for (int i = 0; i &lt;= n - 10; i++) {\n            String window = m_str.substring(i, i + 10);\n            int[] freq = new int[10];\n            // \u7edf\u8ba1\u5b50\u4e32\u4e2d\u6bcf\u4e2a\u6570\u5b57\u7684\u9891\u7387\n            for (char d : window.toCharArray()) {\n                freq[d - '0']++;\n            }\n            // \u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u662f\u4e00\u4e2a\u6392\u5217\n            boolean is_permutation = true;\n            for (int d = 0; d &lt;= 9; d++) {\n                if (freq[d] != 1) {\n                    is_permutation = false;\n                    break;\n                }\n            }\n            // \u5982\u679c\u662f\u6392\u5217\uff0c\u4ee3\u4ef7\u4e3a 0\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\n            if (is_permutation) {\n                System.out.println(0);\n                return;\n            }\n            // \u8bb0\u5f55\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n            char[] dup = new char[10];\n            char[] miss = new char[10];\n            int dup_cnt = 0, miss_cnt = 0;\n            for (int d = 0; d &lt;= 9; d++) {\n                int cnt = freq[d];\n                if (cnt &gt; 1) {\n                    for (int j = 1; j &lt; cnt; j++) {\n                        dup[dup_cnt++] = (char) (d + '0');\n                    }\n                } else if (cnt == 0) {\n                    miss[miss_cnt++] = (char) (d + '0');\n                }\n            }\n            // \u8ba1\u7b97\u4ee3\u4ef7\n            boolean mnz = (window.charAt(0) == '0'); // \u662f\u5426\u6709\u524d\u5bfc\u96f6\n            int cost = 0;\n            if (mnz) {\n                // \u7279\u6b8a\u5904\u7406\u524d\u5bfc\u96f6\n                boolean found = false;\n                for (int j = 0; j &lt; dup_cnt; j++) {\n                    if (dup[j] == window.charAt(0)) {\n                        char best_d = '0';\n                        int min_diff = Integer.MAX_VALUE;\n                        for (int k = 0; k &lt; miss_cnt; k++) {\n                            if (miss[k] != '0') {\n                                int diff = Math.abs(miss[k] - window.charAt(0));\n                                if (diff &lt; min_diff) {\n                                    min_diff = diff;\n                                    best_d = miss[k];\n                                }\n                            }\n                        }\n                        if (best_d == '0') {\n                            cost = Integer.MAX_VALUE;\n                            break;\n                        }\n                        cost += min_diff;\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) continue;\n            }\n            // \u5339\u914d\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n            Arrays.sort(dup, 0, dup_cnt);\n            Arrays.sort(miss, 0, miss_cnt);\n            for (int j = 0; j &lt; dup_cnt; j++) {\n                cost += Math.abs(miss[j] - dup[j]);\n            }\n            // \u66f4\u65b0\u6700\u5c0f\u4ee3\u4ef7\n            min_cost = Math.min(min_cost, cost);\n        }\n        // \u8f93\u51fa\u7ed3\u679c\n        System.out.println(min_cost);\n    }\n}\n</code></pre>"},{"location":"blog/index.html","title":"Blog","text":""}]}