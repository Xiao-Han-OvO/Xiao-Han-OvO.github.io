{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230\u6211\u7684\u6587\u6863\u7ad9","text":"<p>\u8fd9\u91cc\u6709C++\u5185\u5bb9\uff0cJava\u5185\u5bb9\u7b49\uff0c\u4f60\u53ef\u4ee5\u5728\u8fd9\u91cc\u5b66\u5230\u5f88\u591a\u3002</p>"},{"location":"OI/LSYOI/","title":"\u7b80\u4ecb","text":"<p>LSYOI\u4e5f\u53eb\u674e\u5584\u52c7OI\uff0c\u662f\u4e00\u4e2a\u7531\u674e\u5584\u52c7\u8001\u5e08\u642d\u5efa\u7684\u7ebf\u4e0aOnlineJudge\u5e73\u53f0\u3002</p> <p>\u8fd9\u91cc\u4e3b\u8981\u8bb2\u89e3LSYOI\u91cc\u9762\u7684\u8f83\u96be\u9898\u76ee\u3002</p>"},{"location":"OI/LSYOI/%E6%96%B0%E6%89%8B%E6%9D%91/","title":"\u7b80\u4ecb","text":"<p>\u8fd9\u91cc\u662fLSYOI\u4e2d\u7684\u4e00\u4e2a\u57df\uff1a\u65b0\u624b\u6751\u3002</p>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12289/","title":"\u601d\u8def\u4e0e\u7b97\u6cd5","text":""},{"location":"OI/%E9%A2%98%E8%A7%A3/P12289/#_2","title":"\u9898\u76ee\u5927\u610f","text":"<p>\u9898\u76ee\u8981\u6c42\u6211\u4eec\u627e\u5230\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(10\\) \u7684\u5b50\u4e32\uff0c\u4f7f\u5f97\u8be5\u5b50\u4e32\u5305\u542b\u4ece \\(0\\) \u5230 \\(9\\) \u7684\u6240\u6709\u6570\u5b57\uff0c\u4e14\u6bcf\u4e2a\u6570\u5b57\u6070\u597d\u51fa\u73b0\u4e00\u6b21\u3002\u4e3a\u4e86\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u4fee\u6539\u539f\u6570\u7684\u67d0\u4e9b\u6570\u5b57\uff0c\u4f46\u9700\u8981\u6700\u5c0f\u5316\u4fee\u6539\u7684\u4ee3\u4ef7\uff08\u5373\u4fee\u6539\u7684\u6570\u5b57\u5dee\u503c\u4e4b\u548c\uff09\u3002\u540c\u65f6\uff0c\u4fee\u6539\u540e\u7684\u6570\u4ecd\u9700\u6ee1\u8db3\u6ca1\u6709\u524d\u5bfc\u96f6\u7684\u9650\u5236\u3002</p>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12289/#_3","title":"\u601d\u8def","text":"<p>\u4e0d\u662f\u6211\u8bf4\uff0c\u6211\u7684\u7b97\u6cd5\u5012\u8fd8\u633a\u66b4\u529b\u7684\u3002</p> <p>\u6211\u7684\u505a\u6cd5\u662f\u73b0\u9009\u51fa\u4e00\u4e2a\u5b57\u4e32\uff0c\u7136\u540e\u518d\u4f7f\u7528\u7c7b\u4f3c\u4e8e\u6876\u6392\u5e8f\u7684\u65b9\u6cd5\u7edf\u8ba1\u6570\u5b57\u4e2a\u6570\u3002\u7531\u4e8e\u8fd9\u91cc\u5b57\u4e32\u957f\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c\u4e14\u662f\u7531\u5de6\u4fa7\u5411\u53f3\u4fa7\u626b\u63cf\uff0c\u4e5f\u53ef\u4ee5\u8bf4\u662f\u6ed1\u52a8\u7a97\u53e3\u7684\u5199\u6cd5\u3002</p> <p>\u6bcf\u6b21\u6876\u6392\u5e8f\u7edf\u8ba1\u7ed3\u675f\u540e\uff0c\u6211\u4eec\u80fd\u591f\u5f97\u5230\u54ea\u4e9b\u6570\u5b57\u88ab\u591a\u7b97\u4e86\uff0c\u54ea\u4e9b\u6570\u5b57\u88ab\u5c11\u7b97\u4e86\uff0c\u8fd9\u65f6\uff0c\u6211\u4eec\u4e0d\u65ad\u4fdd\u8bc1\u88ab\u66ff\u6362\u7684\u7684\u6570\u5b57\u4e0e\u66ff\u6362\u540e\u7684\u6570\u5b57\u4e4b\u5dee\u6700\u5c0f\u5373\u53ef\u3002</p> <p>\u8fd9\u4e2a\u65f6\u5019\u8981\u6ce8\u610f\u4e24\u4e2a\u7279\u6b8a\u60c5\u51b5\uff1a 1. \u539f\u4e32\u957f\u5ea6\u5c0f\u4e8e \\(10\\)\uff0c\u4e5f\u5c31\u662f\u8bf4\u6839\u672c\u4e0d\u53ef\u80fd\u51fa\u73b0 \\(10\\) \u4e2a\u4e0d\u540c\u7684\u6570\u5b57\u3002 2. \u5f53\u626b\u63cf\u7b2c\u4e00\u4e2a\u957f\u5ea6\u4e3a \\(10\\) \u7684\u5b57\u4e32\u65f6\uff0c\u8981\u6ce8\u610f\u7b2c\u4e00\u4e2a\u6570\u4e0d\u80fd\u88ab\u4fee\u6539\u4e3a \\(0\\)\uff08\u5373\u4e0d\u80fd\u6709\u524d\u5bfc\u96f6\uff09\u3002</p>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12289/#_4","title":"\u7b97\u6cd5","text":"<p>\u7531\u7b97\u6cd5\u6807\u7b7e\u53ef\u77e5</p> <p>\u7531\u601d\u8def\uff0c\u6211\u4eec\u80fd\u77e5\u9053\u6211\u4eec\u8981\u5199\u4ee5\u4e0b\u51e0\u4e2a\u7b97\u6cd5\uff1a</p> <p>1.\u6ed1\u52a8\u7a97\u53e3\uff1a</p> <p>\u4f7f\u7528\u6ed1\u52a8\u7a97\u53e3\uff0c\u904d\u5386\u957f\u5ea6\u4e3a \\(10\\) \u7684\u6240\u6709\u5b50\u4e32\u3002\u5177\u4f53\u5730\uff0c\u5bf9\u6bcf\u4e2a\u5b50\u4e32\uff0c\u8ba1\u7b97\u5176\u662f\u5426\u5df2\u7ecf\u662f\u4e00\u4e2a\u6392\u5217\u3002\u5982\u679c\u662f\uff0c\u5219\u4ee3\u4ef7\u4e3a \\(0\\)\uff0c\u76f4\u63a5\u8fd4\u56de\u7ed3\u679c\u3002\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8ba1\u7b97\u5c06\u5176\u53d8\u4e3a\u4e00\u4e2a\u6392\u5217\u7684\u6700\u5c0f\u4ee3\u4ef7\u3002</p> <p>tip\uff1a\u8fd9\u91cc\u4e0d\u662f\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u7684\u53cc\u6307\u9488\uff0c\u5b9e\u9645\u4e0a\u662f\u5355\u6307\u9488\u3002</p> <p>2.\u6876\u6392\u5e8f\uff1a</p> <p>\u7edf\u8ba1\u6bcf\u4e2a\u6570\u5b57\u7684\u51fa\u73b0\u6b21\u6570\u3002</p> <p>\u8fd9\u91cc\u6211\u4eec\u8fd8\u505a\u4e86\u4e00\u4e9b\u5176\u4ed6\u7684\u4f18\u5316\uff08\u7c7b\u4f3c\u4e8e KMP\uff1f\uff09\uff1a</p> <p>1.\u51cf\u5c11\u91cd\u590d\u8ba1\u7b97\uff1a</p> <p>\u6ed1\u52a8\u7a97\u53e3\u53ef\u4ee5\u901a\u8fc7\u589e\u91cf\u66f4\u65b0\u9891\u7387\u6570\u7ec4\uff08\u5c31\u662f\u5f53\u5b83\u5f80\u540e\u79fb\u52a8\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u52a0\u51cf\u65b0\u8fdb\u5165\u7a97\u53e3\u4e2d\u7684\u6570\u5b57\u4e0e\u79bb\u5f00\u7a97\u53e3\u4e2d\u7684\u6570\u5b57\uff09\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002</p> <p>2.\u6392\u5e8f\uff1a</p> <p>\u5bf9\u4e8e\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\uff0c\u53ef\u4ee5\u6392\u5e8f\u540e\u5339\u914d\uff0c\u786e\u4fdd\u4ee3\u4ef7\u6700\u5c0f\u3002</p>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12289/#_5","title":"\u4ee3\u7801","text":"<p>\u8fd9\u91cc\u732e\u4e0a\u81ea\u5df1\u7684\u4ee3\u7801\uff08Python \u8d85\u65f6\u4e86\uff0c\u5c31\u4e0d\u653e\u51fa\u6765\u4e86\uff09\uff1a</p>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12289/#c","title":"C++","text":"C++<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    string m_str;\n    cin &gt;&gt; m_str;\n    int n = m_str.size();\n    // \u5982\u679c\u957f\u5ea6\u5c0f\u4e8e 10\uff0c\u76f4\u63a5\u8f93\u51fa -1\n    if (n &lt; 10) {\n        cout &lt;&lt; -1 &lt;&lt; endl;\n        return 0;\n    }\n    int min_cost = INT_MAX;\n    // \u6ed1\u52a8\u7a97\u53e3\u904d\u5386\u6240\u6709\u957f\u5ea6\u4e3a 10 \u7684\u5b50\u4e32\n    for (int i = 0; i &lt;= n - 10; i++) {\n        string window = m_str.substr(i, 10);\n        int freq[10] = {0};\n        // \u7edf\u8ba1\u5b50\u4e32\u4e2d\u6bcf\u4e2a\u6570\u5b57\u7684\u9891\u7387\n        for (char d : window) {\n            freq[d - '0']++;\n        }\n        // \u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u662f\u4e00\u4e2a\u6392\u5217\n        bool is_permutation = true;\n        for (int d = 0; d &lt;= 9; d++) {\n            if (freq[d] != 1) {\n                is_permutation = false;\n                break;\n            }\n        }\n        // \u5982\u679c\u662f\u6392\u5217\uff0c\u4ee3\u4ef7\u4e3a 0\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\n        if (is_permutation) {\n            cout &lt;&lt; 0 &lt;&lt; endl;\n            return 0;\n        }\n        // \u8bb0\u5f55\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n        char dup[10], miss[10];\n        int dup_cnt = 0, miss_cnt = 0;\n\n        for (int d = 0; d &lt;= 9; d++) {\n            int cnt = freq[d];\n            if (cnt &gt; 1) {\n                for (int j = 1; j &lt; cnt; j++) {\n                    dup[dup_cnt++] = d + '0';\n                }\n            } else if (cnt == 0) {\n                miss[miss_cnt++] = d + '0';\n            }\n        }\n        // \u8ba1\u7b97\u4ee3\u4ef7\n        bool mnz = (window[0] == '0');\n        // \u662f\u5426\u6709\u524d\u5bfc\u96f6\n        int cost = 0;\n        if (mnz) {\n            // \u7279\u6b8a\u5904\u7406\u524d\u5bfc\u96f6\n            bool found = false;\n            for (int j = 0; j &lt; dup_cnt; j++) {\n                if (dup[j] == window[0]) {\n                    char best_d = '0';\n                    int min_diff = INT_MAX;\n                    for (int k = 0; k &lt; miss_cnt; k++) {\n                        if (miss[k] != '0') {\n                            int diff = abs(miss[k] - window[0]);\n                            if (diff &lt; min_diff) {\n                                min_diff = diff;\n                                best_d = miss[k];\n                            }\n                        }\n                    }\n                    if (best_d == '0') {\n                        cost = INT_MAX;\n                        break;\n                    }\n                    cost += min_diff;\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) continue;\n        }\n        // \u5339\u914d\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n        sort(dup, dup + dup_cnt);\n        sort(miss, miss + miss_cnt);\n        for (int j = 0; j &lt; dup_cnt; j++) {\n            cost += abs(miss[j] - dup[j]);\n        }\n        // \u66f4\u65b0\u6700\u5c0f\u4ee3\u4ef7\n        min_cost = min(min_cost, cost);\n    }\n    // \u8f93\u51fa\u7ed3\u679c\n    cout &lt;&lt; min_cost &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12289/#c_1","title":"C#\uff1a","text":"C#<pre><code>using System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        string m_str = Console.ReadLine();\n        int n = m_str.Length;\n        // \u5982\u679c\u957f\u5ea6\u5c0f\u4e8e 10\uff0c\u76f4\u63a5\u8f93\u51fa -1\n        if (n &lt; 10)\n        {\n            Console.WriteLine(-1);\n            return;\n        }\n        int min_cost = int.MaxValue;\n        // \u6ed1\u52a8\u7a97\u53e3\u904d\u5386\u6240\u6709\u957f\u5ea6\u4e3a 10 \u7684\u5b50\u4e32\n        for (int i = 0; i &lt;= n - 10; i++)\n        {\n            string window = m_str.Substring(i, 10);\n            int[] freq = new int[10];\n            // \u7edf\u8ba1\u5b50\u4e32\u4e2d\u6bcf\u4e2a\u6570\u5b57\u7684\u9891\u7387\n            foreach (char d in window)\n            {\n                freq[d - '0']++;\n            }\n            // \u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u662f\u4e00\u4e2a\u6392\u5217\n            bool is_permutation = true;\n            for (int d = 0; d &lt;= 9; d++)\n            {\n                if (freq[d] != 1)\n                {\n                    is_permutation = false;\n                    break;\n                }\n            }\n            // \u5982\u679c\u662f\u6392\u5217\uff0c\u4ee3\u4ef7\u4e3a 0\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\n            if (is_permutation)\n            {\n                Console.WriteLine(0);\n                return;\n            }\n            // \u8bb0\u5f55\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n            char[] dup = new char[10];\n            char[] miss = new char[10];\n            int dup_cnt = 0, miss_cnt = 0;\n            for (int d = 0; d &lt;= 9; d++)\n            {\n                int cnt = freq[d];\n                if (cnt &gt; 1)\n                {\n                    for (int j = 1; j &lt; cnt; j++)\n                    {\n                        dup[dup_cnt++] = (char)(d + '0');\n                    }\n                }\n                else if (cnt == 0)\n                {\n                    miss[miss_cnt++] = (char)(d + '0');\n                }\n            }\n            // \u8ba1\u7b97\u4ee3\u4ef7\n            bool mnz = (window[0] == '0'); // \u662f\u5426\u6709\u524d\u5bfc\u96f6\n            int cost = 0;\n            if (mnz)\n            {\n                // \u7279\u6b8a\u5904\u7406\u524d\u5bfc\u96f6\n                bool found = false;\n                for (int j = 0; j &lt; dup_cnt; j++)\n                {\n                    if (dup[j] == window[0])\n                    {\n                        char best_d = '0';\n                        int min_diff = int.MaxValue;\n                        for (int k = 0; k &lt; miss_cnt; k++)\n                        {\n                            if (miss[k] != '0')\n                            {\n                                int diff = Math.Abs(miss[k] - window[0]);\n                                if (diff &lt; min_diff)\n                                {\n                                    min_diff = diff;\n                                    best_d = miss[k];\n                                }\n                            }\n                        }\n                        if (best_d == '0')\n                        {\n                            cost = int.MaxValue;\n                            break;\n                        }\n                        cost += min_diff;\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) continue;\n            }\n            // \u5339\u914d\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n            Array.Sort(dup, 0, dup_cnt);\n            Array.Sort(miss, 0, miss_cnt);\n            for (int j = 0; j &lt; dup_cnt; j++)\n            {\n                cost += Math.Abs(miss[j] - dup[j]);\n            }\n            // \u66f4\u65b0\u6700\u5c0f\u4ee3\u4ef7\n            min_cost = Math.Min(min_cost, cost);\n        }\n        // \u8f93\u51fa\u7ed3\u679c\n        Console.WriteLine(min_cost);\n    }\n}\n</code></pre>"},{"location":"OI/%E9%A2%98%E8%A7%A3/P12289/#java","title":"Java","text":"Java<pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String m_str = scanner.nextLine();\n        int n = m_str.length();\n        // \u5982\u679c\u957f\u5ea6\u5c0f\u4e8e 10\uff0c\u76f4\u63a5\u8f93\u51fa -1\n        if (n &lt; 10) {\n            System.out.println(-1);\n            return;\n        }\n        int min_cost = Integer.MAX_VALUE;\n        // \u6ed1\u52a8\u7a97\u53e3\u904d\u5386\u6240\u6709\u957f\u5ea6\u4e3a 10 \u7684\u5b50\u4e32\n        for (int i = 0; i &lt;= n - 10; i++) {\n            String window = m_str.substring(i, i + 10);\n            int[] freq = new int[10];\n            // \u7edf\u8ba1\u5b50\u4e32\u4e2d\u6bcf\u4e2a\u6570\u5b57\u7684\u9891\u7387\n            for (char d : window.toCharArray()) {\n                freq[d - '0']++;\n            }\n            // \u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u662f\u4e00\u4e2a\u6392\u5217\n            boolean is_permutation = true;\n            for (int d = 0; d &lt;= 9; d++) {\n                if (freq[d] != 1) {\n                    is_permutation = false;\n                    break;\n                }\n            }\n            // \u5982\u679c\u662f\u6392\u5217\uff0c\u4ee3\u4ef7\u4e3a 0\uff0c\u76f4\u63a5\u8f93\u51fa\u7ed3\u679c\n            if (is_permutation) {\n                System.out.println(0);\n                return;\n            }\n            // \u8bb0\u5f55\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n            char[] dup = new char[10];\n            char[] miss = new char[10];\n            int dup_cnt = 0, miss_cnt = 0;\n            for (int d = 0; d &lt;= 9; d++) {\n                int cnt = freq[d];\n                if (cnt &gt; 1) {\n                    for (int j = 1; j &lt; cnt; j++) {\n                        dup[dup_cnt++] = (char) (d + '0');\n                    }\n                } else if (cnt == 0) {\n                    miss[miss_cnt++] = (char) (d + '0');\n                }\n            }\n            // \u8ba1\u7b97\u4ee3\u4ef7\n            boolean mnz = (window.charAt(0) == '0'); // \u662f\u5426\u6709\u524d\u5bfc\u96f6\n            int cost = 0;\n            if (mnz) {\n                // \u7279\u6b8a\u5904\u7406\u524d\u5bfc\u96f6\n                boolean found = false;\n                for (int j = 0; j &lt; dup_cnt; j++) {\n                    if (dup[j] == window.charAt(0)) {\n                        char best_d = '0';\n                        int min_diff = Integer.MAX_VALUE;\n                        for (int k = 0; k &lt; miss_cnt; k++) {\n                            if (miss[k] != '0') {\n                                int diff = Math.abs(miss[k] - window.charAt(0));\n                                if (diff &lt; min_diff) {\n                                    min_diff = diff;\n                                    best_d = miss[k];\n                                }\n                            }\n                        }\n                        if (best_d == '0') {\n                            cost = Integer.MAX_VALUE;\n                            break;\n                        }\n                        cost += min_diff;\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) continue;\n            }\n            // \u5339\u914d\u591a\u4f59\u548c\u7f3a\u5931\u7684\u6570\u5b57\n            Arrays.sort(dup, 0, dup_cnt);\n            Arrays.sort(miss, 0, miss_cnt);\n            for (int j = 0; j &lt; dup_cnt; j++) {\n                cost += Math.abs(miss[j] - dup[j]);\n            }\n            // \u66f4\u65b0\u6700\u5c0f\u4ee3\u4ef7\n            min_cost = Math.min(min_cost, cost);\n        }\n        // \u8f93\u51fa\u7ed3\u679c\n        System.out.println(min_cost);\n    }\n}\n</code></pre>"},{"location":"blog/","title":"Blog","text":""}]}